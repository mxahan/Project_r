coef(glm(price~horsepower))
coef(lm(price~horsepower))
summary(glm(price~horsepower))
library(ISLR)
set.seed(1)
train=sample(392,196)
lm.fit=lm(mpg~horsepower,data=Auto,subset=train)
attach(Auto)
mean((mpg-predict(lm.fit,Auto))[-train]^2)
lm.fit2=lm(mpg~poly(horsepower,2),data=Auto,subset=train)
mean((mpg-predict(lm.fit2,Auto))[-train]^2)
lm.fit3=lm(mpg~poly(horsepower,3),data=Auto,subset=train)
mean((mpg-predict(lm.fit3,Auto))[-train]^2)
set.seed(2)
train=sample(392,196)
lm.fit=lm(mpg~horsepower,subset=train)
mean((mpg-predict(lm.fit,Auto))[-train]^2)
lm.fit2=lm(mpg~poly(horsepower,2),data=Auto,subset=train)
mean((mpg-predict(lm.fit2,Auto))[-train]^2)
lm.fit3=lm(mpg~poly(horsepower,3),data=Auto,subset=train)
mean((mpg-predict(lm.fit3,Auto))[-train]^2)
glm.fit=glm(mpg~horsepower,data=Auto)
coef(glm.fit)
lm.fit=lm(mpg~horsepower,data=Auto)
coef(lm.fit)
library(boot)
glm.fit=glm(mpg~horsepower,data=Auto)
cv.err=cv.glm(Auto,glm.fit)
cv.err$delta
cv.error=rep(0,5)
for (i in 1:5){
glm.fit=glm(mpg~poly(horsepower,i),data=Auto)
cv.error[i]=cv.glm(Auto,glm.fit)$delta[1]
}
cv.error
set.seed(17)
cv.error.10=rep(0,10)
for (i in 1:10){
glm.fit=glm(mpg~poly(horsepower,i),data=Auto)
cv.error.10[i]=cv.glm(Auto,glm.fit,K=10)$delta[1]
}
cv.error.10
alpha.fn=function(data,index){
X=data$X[index]
Y=data$Y[index]
return((var(Y)-cov(X,Y))/(var(X)+var(Y)-2*cov(X,Y)))
}
alpha.fn=function(data,index){
X=data$X[index]
Y=data$Y[index]
return((var(Y)-cov(X,Y))/(var(X)+var(Y)-2*cov(X,Y)))
}
alpha.fn(Portfolio,1:100)
set.seed(1)
alpha.fn(Portfolio,sample(100,100,replace=T))
boot(Portfolio,alpha.fn,R=1000)
boot.fn=function(data,index)
return(coef(lm(mpg~horsepower,data=data,subset=index)))
boot.fn(Auto,1:392)
set.seed(1)
boot.fn(Auto,sample(392,392,replace=T))
boot.fn(Auto,sample(392,392,replace=T))
boot(Auto,boot.fn,1000)
summary(lm(mpg~horsepower,data=Auto))$coef
boot.fn=function(data,index)
coefficients(lm(mpg~horsepower+I(horsepower^2),data=data,subset=index))
set.seed(1)
boot(Auto,boot.fn,1000)
summary(lm(mpg~horsepower+I(horsepower^2),data=Auto))$coef
library(ISLR)
set.seed(1)
shape(card)
size(card)
dim(card)
train =  sample(205, 160)
summary(lm(price~, data= card))
summary(lm(price~., data= card))
summary(lm(price~peakrpm+horsepower, data= card))
lm.fit = lm(price~peakrpm+horsepower, data = card, subset= train)
sumamry(lm.fit)
sumarry(lm.fit)
summary(lm.fit)
summary(lm.fit)
attach(card)
train =  sample(205, 160)
lm.fit = lm(price~peakrpm+horsepower, data = card, subset= train)
summary(lm.fit)
library(ISLR)
set.seed(1)
attach(card)
train =  sample(205, 160)
lm.fit = lm(price~peakrpm+horsepower, data = card, subset= train)
summary(lm.fit)
mean((mpg-predict(lm.fit,Auto))[-train]^2)
train =  sample(205, 160)
lm.fit = lm(price~peakrpm+horsepower, data = card, subset= train)
summary(lm.fit)
mean((mpg-predict(lm.fit,Auto))[-train]^2)
mean((mpg-predict(lm.fit,card))[-train]^2)
mean((mpg-predict(lm.fit,card))[-train]^2)
library(ISLR)
set.seed(1)
attach(card)
train =  sample(205, 160)
lm.fit = lm(price~peakrpm+horsepower, data = card, subset= train)
summary(lm.fit)
mean((mpg-predict(lm.fit,card))[-train]^2)
mean((price-predict(lm.fit,card))[-train]^2)
names(card)
lm.fit = lm(price~peakrpm+car_ID, data = card, subset= train)
summary(lm.fit)
mean((price-predict(lm.fit,card))[-train]^2)
lm.fit = lm(price~peakrpm+CarName, data = card, subset= train)
summary(lm.fit)
mean((price-predict(lm.fit,card))[-train]^2)
train =  sample(205, 160)
lm.fit = lm(price~peakrpm+CarName, data = card, subset= train)
summary(lm.fit)
mean((price-predict(lm.fit,card))[-train]^2)
set.seed(1)
attach(card)
train =  sample(205, 160)
lm.fit = lm(price~peakrpm+CarName, data = card, subset= train)
summary(lm.fit)
mean((price-predict(lm.fit,card))[-train]^2)
train =  sample(205, 180)
lm.fit = lm(price~peakrpm+CarName, data = card, subset= train)
summary(lm.fit)
mean((price-predict(lm.fit,card))[-train]^2)
train =  sample(205, 205)
lm.fit = lm(price~peakrpm+CarName, data = card, subset= train)
summary(lm.fit)
mean((price-predict(lm.fit,card))[-train]^2)
names(card)
train =  sample(200, 205)
lm.fit = lm(price~peakrpm+CarName, data = card, subset= train)
summary(lm.fit)
mean((price-predict(lm.fit,card))[-train]^2)
train =  sample(205, 200)
lm.fit = lm(price~peakrpm+CarName, data = card, subset= train)
summary(lm.fit)
mean((price-predict(lm.fit,card))[-train]^2)
set.seed(1)
attach(card)
train =  sample(205, 200)
lm.fit = lm(price~peakrpm+CarName, data = card, subset= train)
summary(lm.fit)
mean((price-predict(lm.fit,card))[-train]^2)
train =  sample(205, 203)
lm.fit = lm(price~peakrpm+CarName, data = card, subset= train)
summary(lm.fit)
mean((price-predict(lm.fit,card))[-train]^2)
train =  sample(205, 204)
lm.fit = lm(price~peakrpm+CarName, data = card, subset= train)
summary(lm.fit)
mean((price-predict(lm.fit,card))[-train]^2)
lm.fit = lm(price~peakrpm+car_ID, data = card, subset= train)
summary(lm.fit)
mean((price-predict(lm.fit,card))[-train]^2)
lm.fit = lm(price~peakrpm+compressionratio, data = card, subset= train)
summary(lm.fit)
mean((price-predict(lm.fit,card))[-train]^2)
lm.fit = lm(price~peakrpm+compressionratio, data = card, subset= train)
summary(lm.fit)
mean((price-predict(lm.fit,card))[-train]^2)
train =  sample(205, 190)
lm.fit = lm(price~peakrpm+compressionratio, data = card, subset= train)
summary(lm.fit)
mean((price-predict(lm.fit,card))[-train]^2)
lm.fit = lm(price~horsepower+peakrpm+compressionratio, data = card, subset= train)
summary(lm.fit)
mean((price-predict(lm.fit,card))[-train]^2)
lm.fit = lm(price~., data = card, subset= train)
summary(lm.fit)
mean((price-predict(lm.fit,card))[-train]^2)
names(card)
lm.fit = lm(price~peakrpm+carlength, data = card, subset= train)
summary(lm.fit)
mean((price-predict(lm.fit,card))[-train]^2)
train =  sample(205, 200)
lm.fit = lm(price~peakrpm+carlength, data = card, subset= train)
summary(lm.fit)
mean((price-predict(lm.fit,card))[-train]^2)
mean((card$price-predict(lm.fit,card))[-train]^2)
names(card)
lm.fit = lm(price~peakrpm+carlength+fueltype+cylindernumber, data = card, subset= train)
summary(lm.fit)
mean((card$price-predict(lm.fit,card))[-train]^2)
lm.fit = lm(price~carlength, data = card, subset= train)
summary(lm.fit)
mean((card$price-predict(lm.fit,card))[-train]^2)
lm.fit = lm(price~carbody, data = card, subset= train)
summary(lm.fit)
mean((card$price-predict(lm.fit,card))[-train]^2)
lm.fit = lm(price~peakrpm+carlength+fueltype+cylindernumber+carbody, data = card, subset= train)
summary(lm.fit)
mean((card$price-predict(lm.fit,card))[-train]^2)
lm.fit = lm(price~peakrpm+carlength+fueltype+cylindernumber+carbody+stroke, data = card, subset= train)
summary(lm.fit)
mean((card$price-predict(lm.fit,card))[-train]^2)
train =  sample(205, 190)
lm.fit = lm(price~peakrpm+carlength+fueltype+cylindernumber+carbody+stroke, data = card, subset= train)
summary(lm.fit)
mean((card$price-predict(lm.fit,card))[-train]^2)
lm.fit = lm(price~peakrpm+carlength+fueltype+carbody+stroke, data = card, subset= train)
summary(lm.fit)
mean((card$price-predict(lm.fit,card))[-train]^2)
price
lm.fit = lm(price~peakrpm+carlength+fueltype+carbody, data = card, subset= train)
summary(lm.fit)
mean((card$price-predict(lm.fit,card))[-train]^2)
# preparing quadratic regression
lm.fit2 = lm(price~poly(peakrpm,2)+poly(carlength,2)+fueltype+carbody, data = card, subset= train)
summary(lm.fit2)
mean((card$price-predict(lm.fit,card))[-train]^2)
# Prediction with rest
mean((card$price-predict(lm.fit2,card))[-train]^2)
# preparing cubic regression
lm.fit3 = lm(price~poly(peakrpm,2)+poly(carlength,3)+fueltype+carbody, data = card, subset= train)
summary(lm.fit3)
# Prediction with rest
mean((card$price-predict(lm.fit2,card))[-train]^2)
# Prediction with rest
mean((card$price-predict(lm.fit3,card))[-train]^2)
glm.fit =  glm(price~peakrpm+carlength+fueltype+carbody, data=card)
coef(glm.fit)
sumamry(glm(price~., data= card))
summary(glm(price~., data= card))
summary(glm(price~CarName, data= card))
cv.err = cv.glm(card, glm.fit)
dv.err$delta
cv.err$delta
Auto$mpg
price
glm.fit =  glm(price~poly(carlength, i), data=card)
cv.err = cv.glm(card, glm.fit)
cv.err$delta
for (i in 1:5){
glm.fit =  glm(price~poly(carlength, i)+carbody+fueltype+fuelsystem, data=card)
cv.error[i] = cv.glm(card, glm.fit)$delta[1]
}
for (i in 1:5){
glm.fit =  glm(price~poly(carlength, i)+carbody+fueltype+fuelsystem, data=card)
cv.error[i] = cv.glm(card, glm.fit)$delta[1]
}
cv.error = rep(0,5)
for (i in 1:5){
glm.fit =  glm(price~poly(carlength, i)+carbody+fueltype+rpm, data=card)
cv.error[i] = cv.glm(card, glm.fit)$delta[1]
}
for (i in 1:5){
glm.fit =  glm(price~poly(carlength, i)+carbody+fueltype+peakrpm, data=card)
cv.error[i] = cv.glm(card, glm.fit)$delta[1]
}
cv.error
glm.fit =  glm(price~poly(carlength, i)+carwidth+carbody+fueltype+peakrpm, data=card)
cv.error[i] = cv.glm(card, glm.fit)$delta[1]
for (i in 1:5){
glm.fit =  glm(price~poly(carlength, i)+carwidth+carbody+fueltype+peakrpm, data=card)
cv.error[i] = cv.glm(card, glm.fit)$delta[1]
}
for (i in 1:5){
glm.fit =  glm(price~poly(carlength, i)+carwidth+carbody+fueltype+peakrpm, data=card)
cv.error[i] = cv.glm(card, glm.fit)$delta[1]
}
cv.error
cv.error.10 = rep(0,10)
for (i in 1:10){
glm.fit = glm(price~poly(carlength, i)+carwidth+carbody+fueltype+peakrpm, data=card)
cv.error.10 = cv.glm(card, glm.fit, K = 10)$delta[1]
}
set.seed(20)
cv.error.10 = rep(0,10)
for (i in 1:10){
glm.fit = glm(price~poly(carlength, i)+carwidth+carbody+fueltype+peakrpm, data=card)
cv.error.10 = cv.glm(card, glm.fit, K = 10)$delta[1]
}
cv.error.10
for (i in 1:10){
glm.fit = glm(price~poly(carlength, i)+carwidth+carbody+fueltype+peakrpm, data=card)
cv.error.10[i] = cv.glm(card, glm.fit, K = 10)$delta[1]
}
cv.error.10
alpha.fn=function(data,index){
X=data$X[index]
Y=data$Y[index]
return((var(Y)-cov(X,Y))/(var(X)+var(Y)-2*cov(X,Y)))
}
alpha.fn(card,1:100)
alpha.fn(price,1:100)
alpha.fn(card$price,1:100)
alpha.fn(card,1:10)
card[1]
card[2]
Portfolio$X[1]
Portfolio$X[2]
card$X[2]
card$X[5]
card$X[10]
alpha.fn=function(data,index){
X=data$carlength[index]
Y=data$price[index]
return((var(Y)-cov(X,Y))/(var(X)+var(Y)-2*cov(X,Y)))
}
alpha.fn(card,1:10)
set.seed(1)
alpha.fn(card,sample(100,100,replace=T))
boot(card,alpha.fn,R=1000)
alpha.fn(card,1:100)
set.seed(1)
alpha.fn(card,sample(100,100,replace=T))
boot(card,alpha.fn,R=1000)
boot.fn = function(data,index)
return()
return(coef(lm(mpg~horsepower,data=card,subset=index)))
return(coef(lm(price~carwidth+carlength,data=card,subset=index)))
alpha.fn=function(data,index){
X=data$carlength[index]
Y=data$price[index]
return((var(Y)-cov(X,Y))/(var(X)+var(Y)-2*cov(X,Y)))
}
alpha.fn(card,1:100)
set.seed(1)
alpha.fn(card,sample(100,100,replace=T))
boot(card,alpha.fn,R=1000)
boot.fn=function(data,index)
return(coef(lm(price~carwidth+carlength,data=card,subset=index)))
boot.fn(card, 1:203)
return(coef(lm(price~carlength,data=card,subset=index)))
boot.fn=function(data,index)
return(coef(lm(price~carlength,data=card,subset=index)))
boot.fn(card, 1:203)
boot.fn=function(data,index)
return(coef(lm(price~carlength+carwidth,data=card,subset=index)))
boot.fn(card, 1:203)
return(coef(lm(price~carlength+carwidth+CarName,data=card,subset=index)))
boot.fn(card, 1:203)
boot.fn=function(data,index)
return(coef(lm(price~carlength+carwidth+CarName,data=card,subset=index)))
boot.fn(card, 1:203)
return(coef(lm(price~carlength+carwidth+peakrpm,data=card,subset=index)))
boot.fn(card, 1:203)
boot.fn=function(data,index)
return(coef(lm(price~carlength+carwidth+peakrpm,data=card,subset=index)))
boot.fn(card, 1:203)
set.seed(1)
boot.fn(card,sample(205,205,replace=T))
boot.fn(card,sample(205,205,replace=T))
boot(Auto,boot.fn,1000)
summary(lm(price~carlength,data=card))$coef
summary(lm(price~carlength+carwidth+peakrpm,data=card))$coef
boot.fn=function(data,index)
coefficients(lm(price~carwidth+I(carwidth^2),data=data,subset=index))
set.seed(1)
set.seed(1)
boot(card,boot.fn,1000)
summary(lm(price~carwidth+I(carwidth^2),data=data))$coef
boot.fn=function(data,index)
coefficients(lm(price~carwidth+I(carwidth^2),data=data,subset=index))
set.seed(1)
boot(card,boot.fn,1000)
summary(lm(price~carwidth+I(carwidth^2),data=data))$coef
typeof(Auto)
typeof(card)
boot.fn=function(data,index)
coefficients(lm(price~carwidth+I(carwidth^2),data=card,subset=index))
set.seed(1)
boot(card,boot.fn,1000)
summary(lm(price~carwidth+I(carwidth^2),data=card))$coef
boot.fn=function(data,index)
coefficients(lm(price~carlength+I(carlength^2),data=card,subset=index))
set.seed(1)
boot(card,boot.fn,1000)
summary(lm(price~carlength+I(carlength^2),data=card))$coef
boot.fn=function(data,index)
coefficients(lm(price~carwidth+I(carwidth^2),data=card,subset=index))
set.seed(1)
boot(card,boot.fn,1000)
summary(lm(price~carwidth+I(carwidth^2),data=card))$coef
library(ISLR)
card <- read.csv("CarPrice_Assignment.csv")
coln <- colnames(card)
print(coln)
summary(card)
fix(card)
names(card)
attach(card)
lm.fit = lm(price~as.numeric(cylindernumber))
summary(lm.fit)
lm.fit = lm(price~horsepower)
lm.fit
names(lm.fit)
coef(lm.fit)
confint(lm.fit)
summary(lm.fit)
predict(lm.fit,data.frame(horsepower=(c(5,10,15))), interval="confidence")
predict(lm.fit,data.frame(horsepower=(c(5,10,15))), interval="prediction")
plot(horsepower, price)
lm.fit = lm(price~carlength+horsepower)
lm.fit
plot(carlength, price)
lm.fit = lm(price~., data =  card)
summary(lm.fit)
lm.fit = lm(price~highwaympg+horsepower+citympg+as.numeric(CarName), data =  card)
lm.fit = lm(price~., data =  card)
summary(lm.fit)
summary(lm(price~compressionratio+peakrpm, data =card))
summary(lm(price~compressionratio+peakrpm+symboling
, data =card))
names(card)
summary(lm(price~compressionratio+peakrpm+symboling+aspiration+carlength+carheight+curbweight
, data =card))
summary(lm(price~compressionratio+peakrpm+aspiration+carlength+carheight+curbweight
, data =card))
names(card)
summary(lm(price~peakrpm+aspiration+carlength+carheight+curbweight+fuelsystem+doornumber+wheelbase+
enginetype+CarName
, data =card))
summary(lm(price~peakrpm+aspiration+carlength+carheight+curbweight+fuelsystem+doornumber+wheelbase+
enginetype+CarNameaudi
, data =card))
setwd("/data/E_drive/github_works/Project_r")
install.packages(c("leaps", "pls"))
fix(Hitters)
names(Hitters)
dim(Hitters)
sum(is.na(Hitters$Salary))
Hitters=na.omit(Hitters)
dim(Hitters)
sum(is.na(Hitters))
sum(is.na(card))
library(leaps)
regfit.full=regsubsets(Salary~.,Hitters)
summary(regfit.full)
regfit.full=regsubsets(Salary~.,data=Hitters,nvmax=19)
reg.summary=summary(regfit.full)
names(reg.summary)
reg.summary$rsq
par(mfrow=c(2,2))
plot(reg.summary$rss,xlab="Number of Variables",ylab="RSS",type="l")
plot(reg.summary$adjr2,xlab="Number of Variables",ylab="Adjusted RSq",type="l")
which.max(reg.summary$adjr2)
points(11,reg.summary$adjr2[11], col="red",cex=2,pch=20)
plot(reg.summary$cp,xlab="Number of Variables",ylab="Cp",type='l')
which.min(reg.summary$cp)
points(10,reg.summary$cp[10],col="red",cex=2,pch=20)
which.min(reg.summary$bic)
plot(reg.summary$bic,xlab="Number of Variables",ylab="BIC",type='l')
points(6,reg.summary$bic[6],col="red",cex=2,pch=20)
plot(regfit.full,scale="r2")
plot(regfit.full,scale="adjr2")
plot(regfit.full,scale="Cp")
plot(regfit.full,scale="bic")
coef(regfit.full,6)
regfit.fwd=regsubsets(Salary~.,data=Hitters,nvmax=19,method="forward")
summary(regfit.fwd)
regfit.bwd=regsubsets(Salary~.,data=Hitters,nvmax=19,method="backward")
summary(regfit.bwd)
coef(regfit.full,7)
coef(regfit.fwd,7)
coef(regfit.bwd,7)
set.seed(1)
train=sample(c(TRUE,FALSE), nrow(Hitters),rep=TRUE)
test=(!train)
regfit.best=regsubsets(Salary~.,data=Hitters[train,],nvmax=19)
test.mat=model.matrix(Salary~.,data=Hitters[test,])
val.errors=rep(NA,19)
for(i in 1:19){
coefi=coef(regfit.best,id=i)
pred=test.mat[,names(coefi)]%*%coefi
val.errors[i]=mean((Hitters$Salary[test]-pred)^2)
}
val.errors
which.min(val.errors)
coef(regfit.best,10)
predict.regsubsets=function(object,newdata,id,...){
form=as.formula(object$call[[2]])
mat=model.matrix(form,newdata)
coefi=coef(object,id=id)
xvars=names(coefi)
mat[,xvars]%*%coefi
}
regfit.best=regsubsets(Salary~.,data=Hitters,nvmax=19)
coef(regfit.best,10)
k=10
set.seed(1)
folds=sample(1:k,nrow(Hitters),replace=TRUE)
cv.errors=matrix(NA,k,19, dimnames=list(NULL, paste(1:19)))
for(j in 1:k){
best.fit=regsubsets(Salary~.,data=Hitters[folds!=j,],nvmax=19)
for(i in 1:19){
pred=predict(best.fit,Hitters[folds==j,],id=i)
cv.errors[j,i]=mean( (Hitters$Salary[folds==j]-pred)^2)
}
}
mean.cv.errors=apply(cv.errors,2,mean)
mean.cv.errors
par(mfrow=c(1,1))
plot(mean.cv.errors,type='b')
install.packages(c("akima", "gam"))
library(ISLR)
attach(Wage)
fit=lm(wage~poly(age,4),data=Wage)
coef(summary(fit))
fit2=lm(wage~poly(age,4,raw=T),data=Wage)
coef(summary(fit2))
fit2a=lm(wage~age+I(age^2)+I(age^3)+I(age^4),data=Wage)
coef(fit2a)
summary(lm(price~poly(peakrpm,4)+aspiration+carlength+carheight+curbweight+fuelsystem+
doornumber+wheelbase+
enginetype+CarName
, data =card))

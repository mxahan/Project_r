+ highwaympg+ boreratio+ stroke + wheelbase + drivewheel
+ enginelocation+ aspiration+ doornumber+ horsepower+ compressionratio,
data= train, nvmax =19)
regfit.best  = regsubsets(price~fuelsystem+fuelsystem+peakrpm+citympg
+ enginesize+enginetype+carwidth+curbweight+carlength
+ highwaympg+ boreratio+ stroke + wheelbase + drivewheel
+ enginelocation+ aspiration+ doornumber+ horsepower+ compressionratio,
data= card, nvmax =19)
regfit.best  = regsubsets(price~fuelsystem+fuelsystem+peakrpm+citympg
+ enginesize+enginetype+carwidth+curbweight+carlength
+ highwaympg+ boreratio+ stroke + wheelbase + drivewheel
+ enginelocation+ aspiration+ doornumber+ horsepower+ compressionratio,
data= [train,], nvmax =19)
regfit.best  = regsubsets(price~fuelsystem+fuelsystem+peakrpm+citympg
+ enginesize+enginetype+carwidth+curbweight+carlength
+ highwaympg+ boreratio+ stroke + wheelbase + drivewheel
+ enginelocation+ aspiration+ doornumber+ horsepower+ compressionratio,
data= card[train,], nvmax =19)
regfit.best  = regsubsets(price~fuelsystem+fuelsystem+peakrpm+citympg
+ enginesize+enginetype+carwidth+curbweight+carlength
+ highwaympg+ boreratio+ stroke + wheelbase + drivewheel
+ enginelocation+ aspiration+ doornumber+ horsepower+ compressionratio,
data= card[train,], nvmax =19)
regfit.best  = regsubsets(price~fuelsystem+fuelsystem+peakrpm+citympg
+ enginesize+enginetype+carwidth+curbweight+carlength
+ highwaympg+ boreratio+ stroke + wheelbase + drivewheel
+ enginelocation+ aspiration+ doornumber+ horsepower+ compressionratio,
data= card[train], nvmax =19)
train = sample(c(TRUE, FALSE), nrow(card), rep= TRUE)
test = (!train)
regfit.best  = regsubsets(price~fuelsystem+fuelsystem+peakrpm+citympg
+ enginesize+enginetype+carwidth+curbweight+carlength
+ highwaympg+ boreratio+ stroke + wheelbase + drivewheel
+ enginelocation+ aspiration+ doornumber+ horsepower+ compressionratio,
data= card[train,], nvmax =19)
test.mat =  model.matrix(price~., data = card[test,])
val.error = rep(NA, 19)
val.errors = rep(NA, 19)
for (i in 1:19){
coefi = coef(regfit.best, id = i)
pred =  test.mat[, names(coefi)]%*%coefi
val.errors[i] =  mean((price[test]-pred)^2)
}
val.erros
val.error
val.errors
which.min(val.errors)
coef(regfit.best, 10)
coef(regfit.best, 12)
mat[, xvars]%*%coefi
predict.regsubsets = function(object, newdata, id, ...){
form  =  as.formula(object$call[[2]])
mat = model.matrix(form, newdata)
coefi =  coef(object, id  =id)
xvars = names(coefi)
mat[, xvars]%*%coefi
}
regfit.best =  regsubsets(price~fuelsystem+fuelsystem+peakrpm+citympg
+ enginesize+enginetype+carwidth+curbweight+carlength
+ highwaympg+ boreratio+ stroke + wheelbase + drivewheel
+ enginelocation+ aspiration+ doornumber+ horsepower+ compressionratio,
data= card, nvmax = 19)
coef(regfit.best, 12)
set.seed(10)
folds = sample(1:k, nrow(card), replace =TRUE)
cv.errors = matrix(NA, k, 19, dimnames = list(NULL, paste(1:19)))
best.fit = regsubsets(price~fuelsystem+fuelsystem+peakrpm+citympg
+ enginesize+enginetype+carwidth+curbweight+carlength
+ highwaympg+ boreratio+ stroke + wheelbase + drivewheel
+ enginelocation+ aspiration+ doornumber+ horsepower+ compressionratio,
data = card[folds!=j,], nvmax = 19)
for (j in 1:k){
best.fit = regsubsets(price~fuelsystem+fuelsystem+peakrpm+citympg
+ enginesize+enginetype+carwidth+curbweight+carlength
+ highwaympg+ boreratio+ stroke + wheelbase + drivewheel
+ enginelocation+ aspiration+ doornumber+ horsepower+ compressionratio,
data = card[folds!=j,], nvmax = 19)
}
k = 10
set.seed(10)
folds = sample(1:k, nrow(card), replace =TRUE)
cv.errors = matrix(NA, k, 19, dimnames = list(NULL, paste(1:19)))
for (j in 1:k){
best.fit = regsubsets(price~fuelsystem+fuelsystem+peakrpm+citympg
+ enginesize+enginetype+carwidth+curbweight+carlength
+ highwaympg+ boreratio+ stroke + wheelbase + drivewheel
+ enginelocation+ aspiration+ doornumber+ horsepower+ compressionratio,
data = card[folds!=j,], nvmax = 19)
}
for (j in 1:k){
best.fit = regsubsets(price~fuelsystem+fuelsystem+peakrpm+citympg
+ enginesize+enginetype+carwidth+curbweight+carlength
+ highwaympg+ boreratio+ stroke + wheelbase + drivewheel
+ enginelocation+ aspiration+ doornumber+ horsepower+ compressionratio,
data = card[folds!=j,], nvmax = 19)
for (i in 1:19){
pred = predict(best.fit, card[folds==j,], id = i)
cv.errors[j, i]= mean((price[folds==j]-pred)^2)
}
}
best.fit = regsubsets(price~fuelsystem+fuelsystem+peakrpm+citympg
+ enginesize+enginetype+carwidth+curbweight+carlength
+ highwaympg+ boreratio+ stroke + wheelbase + drivewheel
data = card[folds!=j,], nvmax = 19)
for (j in 1:k){
best.fit = regsubsets(price~fuelsystem+fuelsystem+peakrpm+citympg
+ enginesize+enginetype+carwidth+curbweight+carlength
+ highwaympg+ boreratio+ stroke + wheelbase + drivewheel
data = card[folds!=j,], nvmax = 19)
for (i in 1:19){
pred = predict(best.fit, card[folds==j,], id = i)
cv.errors[j, i]= mean((price[folds==j]-pred)^2)
}
}
best.fit = regsubsets(price~fuelsystem+fuelsystem+peakrpm+citympg
+ enginesize+enginetype+carwidth+curbweight+carlength
+ highwaympg+ boreratio+ stroke + wheelbase + drivewheel,
data = card[folds!=j,], nvmax = 19)
for (j in 1:k){
best.fit = regsubsets(price~fuelsystem+fuelsystem+peakrpm+citympg
+ enginesize+enginetype+carwidth+curbweight+carlength
+ highwaympg+ boreratio+ stroke + wheelbase + drivewheel,
data = card[folds!=j,], nvmax = 19)
for (i in 1:19){
pred = predict(best.fit, card[folds==j,], id = i)
cv.errors[j, i]= mean((price[folds==j]-pred)^2)
}
}
## Choosing the best feature set by BIC, Cp , AIC ...
library(leaps)
regfit.full =  regsubsets(price~fuelsystem+peakrpm+citympg+
enginesize+enginetype+carwidth+curbweight+carlength
, card) ## full features cause error
summary(regfit.full)
regfit.full = regsubsets(price~fuelsystem+peakrpm+citympg+
enginesize+enginetype+carwidth+curbweight+carlength
+ highwaympg+ boreratio+ stroke + wheelbase + drivewheel
+ enginelocation+ aspiration+ doornumber+ horsepower+ compressionratio,
data = card, nvmax = 19)
reg.summary =  summary(regfit.full)
names(reg.summary)
reg.summary$rsq
par(mfrow = c(2,2))
plot(reg.summary$rss, xlab= "number of variables", ylab = "RSS")
plot(reg.summary$adjr2, xlab= "number of variables", ylab = "adjusted  Rsq")
which.max(reg.summary$adjr2) # return 18
points(18, reg.summary$adjr2[18], col ="red", cex = 2, pch =20)
plot(reg.summary$cp, xlab= "number of variables", ylab = "Cp")
which.min(reg.summary$cp) #18
points(18, reg.summary$cp[18], col ="red", cex = 2, pch =20)
which.min(reg.summary$bic) #13
plot(reg.summary$bic, xlab= "number of variables", ylab = "BIC")
points(13, reg.summary$bic[13], col ="red", cex = 2, pch =20)
plot(regfit.full, scale = "r2")
plot(regfit.full, scale = "adjr2")
plot(regfit.full, scale = "Cp")
plot(regfit.full, scale = "bic")
coef(regfit.full, 13)
## Foward and Backward stepwise selection
regfit.fwd  = regsubsets(price~fuelsystem+peakrpm+citympg
+ enginesize+enginetype+carwidth+curbweight+carlength
+ highwaympg+ boreratio+ stroke + wheelbase + drivewheel
+ enginelocation+ aspiration+ doornumber+ horsepower+ compressionratio,
data= card, nvmax =19, method = "forward")
summary(regfit.fwd)
regfit.bwd  = regsubsets(price~fuelsystem+peakrpm+citympg
+ enginesize+enginetype+carwidth+curbweight+carlength
+ highwaympg+ boreratio+ stroke + wheelbase + drivewheel
+ enginelocation+ aspiration+ doornumber+ horsepower+ compressionratio,
data= card, nvmax =19, method = "backward")
summary(regfit.bwd)
coef(regfit.full, 7)
coef(regfit.fwd, 7)
coef(regfit.bwd, 7)
## Validation Approach
set.seed(1)
train = sample(c(TRUE, FALSE), nrow(card), rep= TRUE)
test = (!train)
regfit.best  = regsubsets(price~fuelsystem+peakrpm+citympg
+ enginesize+enginetype+carwidth+curbweight+carlength
+ highwaympg+ boreratio+ stroke + wheelbase + drivewheel
+ enginelocation+ aspiration+ doornumber+ horsepower+ compressionratio,
data= card[train,], nvmax =19)
test.mat =  model.matrix(price~., data = card[test,])
val.errors = rep(NA, 19)
for (i in 1:19){
coefi = coef(regfit.best, id = i)
pred =  test.mat[, names(coefi)]%*%coefi
val.errors[i] =  mean((price[test]-pred)^2)
}
val.errors
which.min(val.errors) # 12
coef(regfit.best, 12)
predict.regsubsets = function(object, newdata, id, ...){
form  =  as.formula(object$call[[2]])
mat = model.matrix(form, newdata)
coefi =  coef(object, id  =id)
xvars = names(coefi)
mat[, xvars]%*%coefi
}
regfit.best =  regsubsets(price~fuelsystem+peakrpm+citympg
+ enginesize+enginetype+carwidth+curbweight+carlength
+ highwaympg+ boreratio+ stroke + wheelbase + drivewheel
+ enginelocation+ aspiration+ doornumber+ horsepower+ compressionratio,
data= card, nvmax = 19)
coef(regfit.best, 12)
k = 10
set.seed(10)
folds = sample(1:k, nrow(card), replace =TRUE)
cv.errors = matrix(NA, k, 19, dimnames = list(NULL, paste(1:19)))
for (j in 1:k){
best.fit = regsubsets(price~fuelsystem+peakrpm+citympg
+ enginesize+enginetype+carwidth+curbweight+carlength
+ highwaympg+ boreratio+ stroke + wheelbase + drivewheel
+ enginelocation+ aspiration+ doornumber+ horsepower+ compressionratio,
data = card[folds!=j,], nvmax = 19)
for (i in 1:19){
pred = predict(best.fit, card[folds==j,], id = i)
cv.errors[j, i]= mean((price[folds==j]-pred)^2)
}
}
price
for (j in 1:k){
best.fit = regsubsets(price~fuelsystem+peakrpm+citympg
+ enginesize+enginetype+carwidth+curbweight+carlength
+ highwaympg+ boreratio+ stroke + wheelbase + drivewheel
+ enginelocation+ aspiration+ doornumber+ horsepower+ compressionratio,
data = card[folds!=j,], nvmax = 19)
for (i in 1:19){
pred = predict(best.fit, card[folds==j,], id = i)
cv.errors[j, i]= mean((price[folds==j]-pred)^2)
}
}
best.fit = regsubsets(price~fuelsystem+peakrpm+citympg
+ enginesize+enginetype+carwidth+curbweight+carlength,
data = card[folds!=j,], nvmax = 19)
for (j in 1:k){
best.fit = regsubsets(price~fuelsystem+peakrpm+citympg
+ enginesize+enginetype+carwidth+curbweight+carlength,
data = card[folds!=j,], nvmax = 19)
for (i in 1:19){
pred = predict(best.fit, card[folds==j,], id = i)
cv.errors[j, i]= mean((price[folds==j]-pred)^2)
}
}
k = 10
set.seed(10)
folds = sample(1:k, nrow(card), replace =TRUE)
cv.errors = matrix(NA, k, 19, dimnames = list(NULL, paste(1:19)))
for (j in 1:k){
best.fit = regsubsets(price~fuelsystem+peakrpm+citympg
+ enginesize+enginetype+carwidth+curbweight+carlength,
data = card[folds!=j,], nvmax = 19)
for (i in 1:19){
pred = predict(best.fit, card[folds==j,], id = i)
cv.errors[j, i]= mean((price[folds==j]-pred)^2)
}
}
best.fit = regsubsets(price~fuelsystem+peakrpm+citympg
+ enginesize+enginetype+carwidth+curbweight+carlength
+ highwaympg+ boreratio+ stroke + wheelbase + drivewheel,
data = card[folds!=j,], nvmax = 19)
names(card)
for (j in 1:k){
best.fit = regsubsets(price~fuelsystem+peakrpm+citympg
+ enginesize+enginetype+carwidth+curbweight+carlength
+ highwaympg+ boreratio+ stroke + wheelbase + drivewheel,
data = card[folds!=j,], nvmax = 19)
for (i in 1:19){
pred = predict(best.fit, card[folds==j,], id = i)
cv.errors[j, i]= mean((price[folds==j]-pred)^2)
}
}
regfit.best =  regsubsets(price~fuelsystem+peakrpm+citympg
+ enginesize+enginetype+carwidth+curbweight+carlength
+ highwaympg+ boreratio+ stroke + wheelbase + drivewheel
+ enginelocation+ aspiration+ doornumber+ horsepower+ compressionratio,
data= card, nvmax = 19)
coef(regfit.best, 12)
k = 10
set.seed(10)
folds = sample(1:k, nrow(card), replace =TRUE)
cv.errors = matrix(NA, k, 19, dimnames = list(NULL, paste(1:19)))
for (j in 1:k){
best.fit = regsubsets(price~fuelsystem+peakrpm+citympg
+ enginesize+enginetype+carwidth+curbweight+carlength
+ highwaympg+ boreratio+ stroke + wheelbase + drivewheel,
data = card[folds!=j,], nvmax = 19)
for (i in 1:19){
pred = predict(best.fit, card[folds==j,], id = i)
cv.errors[j, i]= mean((price[folds==j]-pred)^2)
}
}
best.fit = regsubsets(price~fuelsystem+peakrpm+citympg
+ enginesize+enginetype+carwidth+curbweight+carlength
+ highwaympg+ boreratio+ stroke + wheelbase + drivewheel,
data = card[folds!=j,], nvmax = 12)
for (i in 1:1){
pred = predict(best.fit, card[folds==j,], id = i)
cv.errors[j, i]= mean((price[folds==j]-pred)^2)
}
for (j in 1:k){
best.fit = regsubsets(price~fuelsystem+peakrpm+citympg
+ enginesize+enginetype+carwidth+curbweight+carlength
+ highwaympg+ boreratio+ stroke + wheelbase + drivewheel,
data = card[folds!=j,], nvmax = 12)
for (i in 1:1){
pred = predict(best.fit, card[folds==j,], id = i)
cv.errors[j, i]= mean((price[folds==j]-pred)^2)
}
}
best.fit = regsubsets(price~fuelsystem+peakrpm+citympg,
data = card[folds!=j,], nvmax = 19)
for (j in 1:k){
best.fit = regsubsets(price~fuelsystem+peakrpm+citympg,
data = card[folds!=j,], nvmax = 19)
for (i in 1:19){
pred = predict(best.fit, card[folds==j,], id = i)
cv.errors[j, i]= mean((price[folds==j]-pred)^2)
}
} ## this generates an error! why!
best.fit = regsubsets(price~fuelsystem+peakrpm+citympg
+ enginesize+enginetype+carwidth+curbweight+carlength
+ highwaympg+ boreratio+ stroke + wheelbase + drivewheel,
+ enginelocation+ aspiration+ doornumber+ horsepower+ compressionratio,
data = card[folds!=j,], nvmax = 19)
for (i in 1:19){
pred = predict(best.fit, card[folds==j,], id = i)
cv.errors[j, i]= mean((price[folds==j]-pred)^2)
}
for (j in 1:k){
best.fit = regsubsets(price~fuelsystem+peakrpm+citympg
+ enginesize+enginetype+carwidth+curbweight+carlength
+ highwaympg+ boreratio+ stroke + wheelbase + drivewheel,
+ enginelocation+ aspiration+ doornumber+ horsepower+ compressionratio,
data = card[folds!=j,], nvmax = 19)
for (i in 1:19){
pred = predict(best.fit, card[folds==j,], id = i)
cv.errors[j, i]= mean((price[folds==j]-pred)^2)
}
} ## this generates an error! why!
for (j in 1:k){
best.fit = regsubsets(price~fuelsystem+peakrpm+citympg
+ enginesize+enginetype+carwidth+curbweight+carlength
+ highwaympg+ boreratio+ stroke + wheelbase + drivewheel,
+ enginelocation+ aspiration+ doornumber+ horsepower+ compressionratio,
data = card[folds!=j,], nvmax = 19)
for (i in 1:19){
pred = predict(best.fit, card[folds==j,], id = i)
cv.errors[j, i]= mean((price[folds==j]-pred)^2)
}
} ## this generates an error! why!
for (j in 1:k){
best.fit = regsubsets(price~fuelsystem+peakrpm+citympg
+ enginesize+enginetype+carwidth+curbweight+carlength
+ highwaympg+ boreratio+ stroke + wheelbase + drivewheel,
+ enginelocation+ aspiration+ doornumber+ horsepower+ compressionratio,
data = card[folds!=j,], nvmax = 19)
for (i in 1:19){
pred = predict(best.fit, card[folds==j,], id = i)
cv.errors[j, i]= mean((price[folds==j]-pred)^2)
}
} ## this generates an error! why!
regfit.best =  regsubsets(price~fuelsystem+peakrpm+citympg
+ enginesize+enginetype+carwidth+curbweight+carlength
+ highwaympg+ boreratio+ stroke + wheelbase + drivewheel
+ enginelocation+ aspiration+ doornumber+ horsepower+ compressionratio,
data= card, nvmax = 19)
coef(regfit.best, 12)
k = 10
set.seed(10)
folds = sample(1:k, nrow(card), replace =TRUE)
cv.errors = matrix(NA, k, 19, dimnames = list(NULL, paste(1:19)))
for (j in 1:k){
best.fit = regsubsets(price~ fuelsystem+ peakrpm+ citympg
+ enginesize+enginetype+carwidth+curbweight+carlength
+ highwaympg+ boreratio+ stroke + wheelbase + drivewheel,
+ enginelocation+ aspiration+ doornumber+ horsepower+ compressionratio,
data = card[folds!=j,], nvmax = 19)
for (i in 1:19){
pred = predict(best.fit, card[folds==j,], id = i)
cv.errors[j, i]= mean((price[folds==j]-pred)^2)
}
} ## this generates an error! why!
for (j in 1:k){
best.fit = regsubsets(price~fuelsystem+ peakrpm+ citympg
+ enginesize+enginetype+carwidth+curbweight+carlength
+ highwaympg+ boreratio+ stroke + wheelbase + drivewheel,
+ enginelocation+ aspiration+ doornumber+ horsepower+ compressionratio,
data = card[folds!=j,], nvmax = 19)
for (i in 1:19){
pred = predict(best.fit, card[folds==j,], id = i)
cv.errors[j, i]= mean((price[folds==j]-pred)^2)
}
} ## this generates an error! why!
best.fit = regsubsets(price~fuelsystem+peakrpm+citympg
+ enginesize+enginetype+carwidth+curbweight+carlength
+ highwaympg+ boreratio+ stroke + wheelbase + drivewheel
+ enginelocation+ aspiration+ doornumber+ horsepower+ compressionratio,
data = card[folds!=j,], nvmax = 19)
for (j in 1:k){
best.fit = regsubsets(price~fuelsystem+peakrpm+citympg
+ enginesize+enginetype+carwidth+curbweight+carlength
+ highwaympg+ boreratio+ stroke + wheelbase + drivewheel
+ enginelocation+ aspiration+ doornumber+ horsepower+ compressionratio,
data = card[folds!=j,], nvmax = 19)
for (i in 1:19){
pred = predict(best.fit, card[folds==j,], id = i)
cv.errors[j, i]= mean((price[folds==j]-pred)^2)
}
} ## this generates an error! why!
for (j in 1:k){
best.fit =  regsubsets(price~fuelsystem+peakrpm+citympg
+ enginesize+enginetype+carwidth+curbweight+carlength
+ highwaympg+ boreratio+ stroke + wheelbase + drivewheel
+ enginelocation+ aspiration+ doornumber+ horsepower+ compressionratio,
data= card, nvmax = 19)
for (i in 1:19){
pred = predict(best.fit, card[folds==j,], id = i)
cv.errors[j, i]= mean((price[folds==j]-pred)^2)
}
} ## this generates an error! why!
mean.cv.errors = apply(cv.errors, 2, mean)
mean.cv.errors
par(mfrow = c(1,1))
plot(mean.cv.errors, type = 'b')
mean.cv.errors = apply(cv.errors, 2, mean)
mean.cv.errors
par(mfrow = c(1,1))
plot(mean.cv.errors, type = 'b')
best.fit =  regsubsets(price~fuelsystem+peakrpm+citympg
+ enginesize+enginetype+carwidth+curbweight+carlength
+ highwaympg+ boreratio+ stroke + wheelbase + drivewheel
+ enginelocation+ aspiration+ doornumber+ horsepower+ compressionratio,
data= card[folds!=j,], nvmax = 19)
for (j in 1:k){
best.fit =  regsubsets(price~fuelsystem+peakrpm+citympg
+ enginesize+enginetype+carwidth+curbweight+carlength
+ highwaympg+ boreratio+ stroke + wheelbase + drivewheel
+ enginelocation+ aspiration+ doornumber+ horsepower+ compressionratio,
data= card[folds!=j,], nvmax = 19)
for (i in 1:19){
pred = predict(best.fit, card[folds==j,], id = i)
cv.errors[j, i]= mean((price[folds==j]-pred)^2)
}
}
mean.cv.errors = apply(cv.errors, 2, mean)
mean.cv.errors
par(mfrow = c(1,1))
for (j in 5:k){
best.fit =  regsubsets(price~fuelsystem+peakrpm+citympg
+ enginesize+enginetype+carwidth+curbweight+carlength
+ highwaympg+ boreratio+ stroke + wheelbase + drivewheel
+ enginelocation+ aspiration+ doornumber+ horsepower+ compressionratio,
data= card[folds!=j,], nvmax = 19)
for (i in 1:19){
pred = predict(best.fit, card[folds==j,], id = i)
cv.errors[j, i]= mean((price[folds==j]-pred)^2)
}
}
for (j in 5:k){
best.fit =  regsubsets(price~fuelsystem+peakrpm+citympg
+ enginesize+enginetype+carwidth+curbweight+carlength
+ highwaympg+ boreratio+ stroke + wheelbase + drivewheel
+ enginelocation+ aspiration+ doornumber+ horsepower+ compressionratio,
data= card[folds!=j,], nvmax = 19)
for (i in 1:19){
pred = predict(best.fit, card[folds==j,], id = i)
cv.errors[j, i]= mean((price[folds==j]-pred)^2)
}
}
folds = sample(1:k, nrow(card), replace =TRUE)
folds
k = 10
set.seed(1)
set.seed(1)
folds = sample(1:k, nrow(card), replace =TRUE)
cv.errors = matrix(NA, k, 19, dimnames = list(NULL, paste(1:19)))
cv.errors = matrix(NA, k, 19, dimnames = list(NULL, paste(1:19)))
for (j in 5:k){
best.fit =  regsubsets(price~fuelsystem+peakrpm+citympg
+ enginesize+enginetype+carwidth+curbweight+carlength
+ highwaympg+ boreratio+ stroke + wheelbase + drivewheel
+ enginelocation+ aspiration+ doornumber+ horsepower+ compressionratio,
data= card[folds!=j,], nvmax = 19)
for (i in 1:19){
pred = predict(best.fit, card[folds==j,], id = i)
cv.errors[j, i]= mean((price[folds==j]-pred)^2)
}
}
reg.best  =  regsubsets(price~fuelsystem+peakrpm+citympg
+ enginesize+enginetype+carwidth+curbweight+carlength
+ highwaympg+ boreratio+ stroke + wheelbase + drivewheel
+ enginelocation+ aspiration+ doornumber+ horsepower+ compressionratio,
data= card, nvmax = 19)
coef(reg.best, 11)
+ enginelocation+ aspiration+ doornumber+ horsepower+ compressionratio,
data= card)[-1]
y = price
library(glmnet)
grid  = 10^seq(10,-2,length=100)
ridge.mod = glmnet(x,y, alpha = 0, lambda = grid)
library(glmnet)
package glmnet
install.packages("glmnetcr")
grid  = 10^seq(10,-2,length=100)
ridge.mod = glmnet(x,y, alpha = 0, lambda = grid)
ridge.mod = glmnetcr(x,y, alpha = 0, lambda = grid)
install.packages("~/Downloads/glmnet_3.0-2.tar.gz", repos = NULL, type = "source")
library(glmnet)
install.packages("~/Downloads/glmnet_3.0-2.tar.gz", repos = NULL, type = "source")
updateR()

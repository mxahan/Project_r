install.packages("ISLR")
library(ISLR)
auto = auto
auto = Auto
summary((Auto))
# Broad to Focus
# Broad to Focus
q()
install.packages("gam")
install.packages("gam")
library(mgcv)
gam.m3 <-gam(price~s(enginesize, 5), data=card)
gam.m3 <-gam(price~s(enginesize), data=card)
card
fit2 = lm(price~ns(enginesize, df=4), data=card)
setwd("/data/E_drive/github_works/Project_r")
pred2= predict(fit2, newdata = list(enginesize=engs.grid), se=T)
source('/data/E_drive/github_works/Project_r/Project_R_file.R', echo=TRUE)
library(mgcv)
gam.m3 <-gam(price~s(enginesize), data=card)
gam.m3 <-gam(price~s(enginesize,2), data=card)
gam.m3 <-gam(price~ns(enginesize)+, data=card)
gam.m3 <-gam(price~s(poly(enginesize,5)+, data=card)
gam.m3 <-gam(price~s(poly(enginesize,5)+carwidth, data=card)
gam.m3 <-gam(price~s(poly(enginesize,5)+carwidth, data=card))
gam.m3 <-gam(price~s(poly(enginesize,5)+carwidth, data=card))
gam.m3 <-gam(price~s(poly(enginesize,4))+carwidth, data=card)
par(mfrow = c(1,3))
plot(gam.m3, se=TRUE, col='blue')
plot.gam(gam1, se=True, col="red")
gam1 = lm(price~ns(carwidth, 4)+ns(enginesize,5)+curbweight, data=card)
gam1 = lm(price~ns(carwidth, 4)+ns(enginesize,5)+curbweight, data=card)
legend("topright", legend = c("Span 0.2", "Spna 0.5"), col=c("red", "blue"), lty=1, lwd=2, cex=0.8)
gam1 = lm(price~ns(carwidth, 4)+ns(enginesize,5)+curbweight, data=card)
library(mgcv)
gam.m3 <-gam(price~s(poly(enginesize,4))+carwidth, data=card)
# spline
library(splines)
fit = lm(price~bs(enginesize, knots = c(25,40,60)), data=card)
pred = predict(fit, newdata = list(enginesize=engs.grid), se=T)
plot(enginesize, price, col="grey")
lines(engs.grid, pred$fit, lwd=2)
source('/data/E_drive/github_works/Project_r/Project_R_file.R', echo=TRUE)
plot(mean.cv.errors)
reg.best  =  regsubsets(price~fuelsystem+peakrpm+citympg
+ enginesize+enginetype+carwidth+curbweight+carlength
+ highwaympg+ boreratio+ stroke + wheelbase + drivewheel
+ enginelocation+ aspiration+ doornumber+ horsepower+ compressionratio,
data= card, nvmax = 19)
coef(reg.best, 11)
x =  model.matrix(price~fuelsystem+peakrpm+citympg
+ enginesize+enginetype+carwidth+curbweight+carlength
+ highwaympg+ boreratio+ stroke + wheelbase + drivewheel
+ enginelocation+ aspiration+ doornumber+ horsepower+ compressionratio,
data= card)[,-1]
y = price
library(glmnet)
grid  = 10^seq(10,-2,length=100)
ridge.mod = glmnet(x,y, alpha = 0, lambda = grid)
dim(coef(ridge.mod))
ridge.mod$lambda[50]
ridge.mod$lambda[60]
sqrt(sum(coef(ridge.mod)[-1, 60]^2))
predict(ridge.mod, s = 50, type= "coefficients")[1:20,]
set.seed(1)
train = sample(1:nrow(x), nrow(x)/2)
test = (-train)
y.test = y[test]
ridge.mod =  glmnet(x[train,], y[train], alpha = 0, lambda = grid, thresh = 1e-12)
ridge.pred =  predict(ridge.mod, s =4, newx = x[test,])
mean((ridge.pred - y.test)^2)
mean((mean(y[train])-y.test)^2)
ridge.pred =  predict(ridge.mod, s = 1e10, newx = x[test,])
mean((ridge.pred-y.test)^2)
ridge.pred = predict(ridge.mod, s =0, newx = x[test,], exact = T)
mean((ridge.pred-y.test)^2)
lm(y~x, subset =  train)
predict(ridge.mod, s=0,  newx = x[test,])[1:20,]
set.seed(1)
cv.out = cv.glmnet(x[train, ], y[train], alpha = 0)
plot(cv.out)
bestlam = cv.out$lambda.min
bestlam
ridge.pred = predict(ridge.mod, s =bestlam, newx = x[test,])
mean((ridge.pred - y.test)^2)
out =  glmnet(x,y, alpha = 0)
predict(out, type = "coefficients", s = bestlam)[1:20,]
### Lasso
lasso.mod = glmnet(x[train,], y[train], alpha = 1, lambda = grid)
plot(lasso.mod)
set.seed(1)
cv.out =  cv.glmnet(x[train,], y[train], alpha=1)
plot(cv.out)
bestlam = cv.out$lambda.min
lasso.pred = predict(lasso.mod, s =bestlam, newx = x[test,])
mean((lasso.pred-y.test)^2)
out = glmnet(x,y, alpha =1, lambda =grid)
lasso.coef = predict(out, type ="coefficients", s= bestlam)[1:20,]
lasso.coef
lasso.coef[lasso.coef != 0]
lasso.coef[lasso.coef!=0]
library(pls)
set.seed(2)
pcr.fit = pcr(price~fuelsystem+peakrpm+citympg
+ enginesize+enginetype+carwidth+curbweight+carlength
+ highwaympg+ boreratio+ stroke + wheelbase + drivewheel
+ enginelocation+ aspiration+ doornumber+ horsepower+ compressionratio,
data = card, scale = TRUE)
summary(pcr.fit)
validationplot(pcr.fit, val.type = "MSEP")
set.seed(1)
pcr.fit = pcr(price~fuelsystem+peakrpm+citympg
+ enginesize+enginetype+carwidth+curbweight+carlength
+ highwaympg+ boreratio+ stroke + wheelbase + drivewheel
+ enginelocation+ aspiration+ doornumber+ horsepower+ compressionratio,
data = card, scale = TRUE)
summary(pcr.fit)
validationplot(pcr.fit, val.type = "MSEP")
pcr.pred = predict(pcr.fit, x[test,], ncomp =7)
mean((pcr.pred - y.test)^2)
pcr.fit =  pcr(y~x, scale= TRUE, ncomp = 7)
summary(pcr.fit)
set.seed(1)
pls.fit = plsr(price~fuelsystem+peakrpm+citympg
+ enginesize+enginetype+carwidth+curbweight+carlength
+ highwaympg+ boreratio+ stroke + wheelbase + drivewheel
+ enginelocation+ aspiration+ doornumber+ horsepower+ compressionratio,
data = card,  scale = TRUE)
summary(pls.fit)
validationplot(pls.fit, val.type = "MSEP")
pls.pred = predict(pls.fit, x[test,], ncomp = 2)
mean((pls.pred - y.test)^2)
pls.fit =  plsr(price~fuelsystem+peakrpm+citympg
+ enginesize+enginetype+carwidth+curbweight+carlength
+ highwaympg+ boreratio+ stroke + wheelbase + drivewheel
+ enginelocation+ aspiration+ doornumber+ horsepower+ compressionratio,
data = card,  scale = TRUE, ncomp =2)
summary(pls.fit)
fit = lm(price~poly(enginesize, 4), data = card)
coef(summary(fit))
fit2 = lm(price~poly(enginesize, 4, raw=T), data = card)
coef(summary(fit))
fit2a = lm(price~enginesize+I(enginesize^2)+I(enginesize^3), data=card)
coef(fit2a)
fit2b =  lm(price~cbind(enginesize, enginesize^2, enginesize^3))
coef(fit2b)
engsrange =  range(enginesize)
engs.grid =  seq(from=engsrange[1], to = engsrange[2])
preds= predict(fit, newdata = list(enginesize=engs.grid), se=TRUE)
se.bands =  cbind(preds$fit+2*preds$se.fit, preds$fit-2*preds$se)
#plot
par(mfrow=c(1,2), mar = c(4.5, 4.5,1,1), oma=c(0,0,4,0))
plot(enginesize, price, xlim= engsrange, cex=0.5, col="darkgrey")
title("Degree 3  polynomial", outer=T)
line(engs.grid, preds$fit, lwd=2, col="blue")
matlines(engs.grid, se.bands, lwd=1, col="blue", lty=3)
preds2= predict(fit2, newdata=list(enginesize=engs.grid), se=TRUE)
max(abs(preds$fit- preds2$fit))
fit.1 = lm(price~enginesize, data=card)
fit.2 = lm(price~poly(enginesize,2), data=card)
fit.3 = lm(price~poly(enginesize,3), data=card)
fit.4 = lm(price~poly(enginesize,4), data=card)
fit.5 = lm(price~poly(enginesize,5), data=card)
anova(fit.1, fit.2, fit.3, fit.4, fit.5)
coef(summary(fit.5))
fit.1 = lm(price~enginesize+carwidth, data=card)
fit.2 = lm(price~poly(enginesize,2)+carwidth, data=card)
fit.1 = lm(price~poly(enginesize,3)+carwidth, data=card)
anova(fit.1, fit.2, fit.3)
fit = glm(I(price>15000)~poly(enginesize, 4), data=card, family = binomial)
preds = predict(fit, newdata = list(enginesize=engs.grid), se=T)
pfit = exp(preds$fit)/(1+exp(preds$fit))
se.bands.logit = cbind(preds$fit+2*preds$se.fit, preds$fit-2*preds$se.fit)
se.bands = exp(se.bands.logit)/(1+exp(se.bands.logit))
preds = predict(fit, newdata = list(enginesize=engs.grid), type="response", se=T)
plot(enginesize, I(price>15000), xlim=engsrange, type ="n", ylim= c(0,0.2))
points(jitter(enginesize), I((price>15000)/5), cex=0.5, pch="|", col="darkgrey")
lines(engs.grid, pfit, lwd=2, col="blue")
matlines(engs.grid, se.bands, lwd = 1, col="blue", lyt=3)
table(cut(enginesize, 4))
fit =lm(price~cut(enginesize, 4), data=card)
coef(summary(fit))
# spline
library(splines)
fit = lm(price~bs(enginesize, knots = c(25,40,60)), data=card)
pred = predict(fit, newdata = list(enginesize=engs.grid), se=T)
plot(enginesize, price, col="grey")
lines(engs.grid, pred$fit, lwd=2)
lines(engs.grid, pred$fit+2*pred$se, ity="dashed")
lines(engs.grid, pred$fit-2*pred$se, ity="dashed")
dim(bs(enginesize, knots=c(25,40,60)))
dim(bs(enginesize, df=6))
attr(bs(enginesize, df=6), "knots")
fit2 = lm(price~ns(enginesize, df=4), data=card)
pred2= predict(fit2, newdata = list(enginesize=engs.grid), se=T)
lines(engs.grid, pred2$fit, col="red", lwd=2)
plot(enginesize, price, xlim= engsrange, cex=0.5, col="darkgrey")
title("smoothing Spline")
fit = smooth.spline(enginesize, price, df=16)
fit2 = smooth.spline(enginesize, price, cv=TRUE)
fit2$df
lines(fit,col="red", lwd=2)
lines(fit2,col="blue", lwd=2)
legend("topright", legend = c("16 DF", "6.8 DF"), col=c("red", "blue"), lty=1, lwd=2, cex=0.8)
plot(enginesize, price, xlim = engsrange, cex=.5, col="darkgrey")
title("local regerssion")
fit = loess(price~enginesize, span=.2, data=card)
fit2 = loess(price~enginesize, span=.5, data=card)
lines(engs.grid, predict(fit, data.frame(enginesize=engs.grid)), col="red", lwd=2)
lines(engs.grid, predict(fit2, data.frame(enginesize=engs.grid)), col="blue", lwd=2)
legend("topright", legend = c("Span 0.2", "Spna 0.5"), col=c("red", "blue"), lty=1, lwd=2, cex=0.8)
gam1 = lm(price~ns(carwidth, 4)+ns(enginesize,5)+curbweight, data=card)
library(mgcv)
gam.m3 <-gam(price~s(poly(enginesize,4))+carwidth, data=card)
par(mfrow = c(1,3))
plot(gam.m3, se=TRUE, col='blue')
plot.gam(gam1, se=True, col="red")
## Chapter 9
## Chapter 9
## Chapter 9
## Chapter 9
## Chapter 9
## Chapter 9
## Chapter 9
## Chapter 9
## Chapter 9
## Chapter 9
## Chapter 9
## Chapter 9
## Chapter 9
## Chapter 9
## Chapter 9
## Chapter 9
## Chapter 9
## Chapter 9
## Chapter 9
## Chapter 9
## Chapter 9
## Chapter 9
## Chapter 9
plot.gam(gam1, se=True, col="red")
gam1 = lm(price~ns(carwidth, 4)+ns(enginesize,5)+curbweight, data=card)
library(mgcv)
gam.m3 <-gam(price~s(poly(enginesize,4))+carwidth, data=card)
par(mfrow = c(1,3))
plot(gam.m3, se=TRUE, col='blue')
plot.gam(gam1, se=True, col="red")
plot.gam(gam1, se=TRUE, col="red")
gam.m1= gam(price~s(poly(enginesize,5))+carwidth, data=card)
gam.m1= gam(price~s(poly(enginesize,5))+carwidth+curbweight, data=card)
gam.m1= gam(price~s(poly(enginesize,5))+carwidth, data=card)
gam.m2= gam(price~s(poly(enginesize,5))+carwidth+curbweight, data=card)
anova(gam.m1, gam.m2, test=F)
anova(gam.m1, gam.m2, test="F")
gam1 = lm(price~ns(carwidth, 4)+ns(enginesize,5)+curbweight, data=card)
library(mgcv)
gam.m3 <-gam(price~s(poly(enginesize,4))+carwidth, data=card)
par(mfrow = c(1,3))
plot(gam.m3, se=TRUE, col='blue')
plot.gam(gam1, se=TRUE, col="red")
gam.m1= gam(price~s(poly(enginesize,5))+carwidth, data=card)
anova(gam.m1, gam.m2, gam.m3, test="F")
summary(gam.m3)
preds =predict(gam.m2, newdata=price)
preds =predict(gam.m2, newdata=card)
preds =predict(gam.m2, newdata=price)
gam.lo= gam(wage~s(enginesize, df=4)+lo(carwidth, span = 0.7)+curbweight, data=card)
plot.gam(gam.lo, se=TRUE, col="green")
library(akima)
gam.lr = gam(I(price>15000)~carwidth+s(enginesize, df=5)+curbweight, family = binomial, data=card)
install.packages("akima")
